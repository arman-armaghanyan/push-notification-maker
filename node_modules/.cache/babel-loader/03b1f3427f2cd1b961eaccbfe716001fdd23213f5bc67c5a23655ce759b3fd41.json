{"ast":null,"code":"// Simple icon loader that reads from the public folder\nexport const loadIconsFromFolder = async () => {\n  try {\n    // Get list of icon files from the public/icons directory\n    const response = await fetch('/icons/');\n    if (!response.ok) {\n      throw new Error('Failed to fetch icons directory');\n    }\n    const html = await response.text();\n\n    // Parse the HTML to extract file names\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(html, 'text/html');\n    const links = doc.querySelectorAll('a[href$=\".svg\"]');\n    const iconFiles = Array.from(links).map(link => link.getAttribute('href'));\n    if (iconFiles.length === 0) {\n      return {\n        icons: [],\n        count: 0,\n        message: 'No SVG files found in the icons directory.'\n      };\n    }\n\n    // Load each SVG file\n    const icons = await Promise.all(iconFiles.map(async (filename, index) => {\n      try {\n        const svgResponse = await fetch(`/icons/${filename}`);\n        const svgContent = await svgResponse.text();\n\n        // Clean filename for display\n        const name = filename.replace('.svg', '').replace(/-/g, ' ').replace(/_/g, ' ');\n        const tags = filename.replace('.svg', '').split(/[-_]/).filter(tag => tag.length > 0);\n        return {\n          id: `file-${index + 1}`,\n          name: name,\n          filename: filename,\n          tags: tags,\n          svg: svgContent\n        };\n      } catch (error) {\n        console.warn(`Error loading ${filename}:`, error);\n        return null;\n      }\n    }));\n\n    // Filter out failed loads\n    const validIcons = icons.filter(icon => icon !== null);\n    return {\n      icons: validIcons,\n      count: validIcons.length,\n      message: `Successfully loaded ${validIcons.length} icons`\n    };\n  } catch (error) {\n    console.error('Error loading icons:', error);\n    return {\n      icons: [],\n      count: 0,\n      error: 'Failed to load icons',\n      message: error.message\n    };\n  }\n};","map":{"version":3,"names":["loadIconsFromFolder","response","fetch","ok","Error","html","text","parser","DOMParser","doc","parseFromString","links","querySelectorAll","iconFiles","Array","from","map","link","getAttribute","length","icons","count","message","Promise","all","filename","index","svgResponse","svgContent","name","replace","tags","split","filter","tag","id","svg","error","console","warn","validIcons","icon"],"sources":["/Users/armanarmaghanyan/Documents/Coding/Picsart/pushmaker/src/iconLoader.js"],"sourcesContent":["// Simple icon loader that reads from the public folder\nexport const loadIconsFromFolder = async () => {\n  try {\n    // Get list of icon files from the public/icons directory\n    const response = await fetch('/icons/');\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch icons directory');\n    }\n    \n    const html = await response.text();\n    \n    // Parse the HTML to extract file names\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(html, 'text/html');\n    const links = doc.querySelectorAll('a[href$=\".svg\"]');\n    \n    const iconFiles = Array.from(links).map(link => link.getAttribute('href'));\n    \n    if (iconFiles.length === 0) {\n      return { icons: [], count: 0, message: 'No SVG files found in the icons directory.' };\n    }\n    \n    // Load each SVG file\n    const icons = await Promise.all(\n      iconFiles.map(async (filename, index) => {\n        try {\n          const svgResponse = await fetch(`/icons/${filename}`);\n          const svgContent = await svgResponse.text();\n          \n          // Clean filename for display\n          const name = filename.replace('.svg', '').replace(/-/g, ' ').replace(/_/g, ' ');\n          const tags = filename.replace('.svg', '').split(/[-_]/).filter(tag => tag.length > 0);\n          \n          return {\n            id: `file-${index + 1}`,\n            name: name,\n            filename: filename,\n            tags: tags,\n            svg: svgContent\n          };\n        } catch (error) {\n          console.warn(`Error loading ${filename}:`, error);\n          return null;\n        }\n      })\n    );\n    \n    // Filter out failed loads\n    const validIcons = icons.filter(icon => icon !== null);\n    \n    return {\n      icons: validIcons,\n      count: validIcons.length,\n      message: `Successfully loaded ${validIcons.length} icons`\n    };\n    \n  } catch (error) {\n    console.error('Error loading icons:', error);\n    return {\n      icons: [],\n      count: 0,\n      error: 'Failed to load icons',\n      message: error.message\n    };\n  }\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EAC7C,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,SAAS,CAAC;IAEvC,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;IACpD;IAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;;IAElC;IACA,MAAMC,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;IAC9B,MAAMC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACL,IAAI,EAAE,WAAW,CAAC;IACrD,MAAMM,KAAK,GAAGF,GAAG,CAACG,gBAAgB,CAAC,iBAAiB,CAAC;IAErD,MAAMC,SAAS,GAAGC,KAAK,CAACC,IAAI,CAACJ,KAAK,CAAC,CAACK,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,YAAY,CAAC,MAAM,CAAC,CAAC;IAE1E,IAAIL,SAAS,CAACM,MAAM,KAAK,CAAC,EAAE;MAC1B,OAAO;QAAEC,KAAK,EAAE,EAAE;QAAEC,KAAK,EAAE,CAAC;QAAEC,OAAO,EAAE;MAA6C,CAAC;IACvF;;IAEA;IACA,MAAMF,KAAK,GAAG,MAAMG,OAAO,CAACC,GAAG,CAC7BX,SAAS,CAACG,GAAG,CAAC,OAAOS,QAAQ,EAAEC,KAAK,KAAK;MACvC,IAAI;QACF,MAAMC,WAAW,GAAG,MAAMzB,KAAK,CAAC,UAAUuB,QAAQ,EAAE,CAAC;QACrD,MAAMG,UAAU,GAAG,MAAMD,WAAW,CAACrB,IAAI,CAAC,CAAC;;QAE3C;QACA,MAAMuB,IAAI,GAAGJ,QAAQ,CAACK,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;QAC/E,MAAMC,IAAI,GAAGN,QAAQ,CAACK,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAACE,KAAK,CAAC,MAAM,CAAC,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACf,MAAM,GAAG,CAAC,CAAC;QAErF,OAAO;UACLgB,EAAE,EAAE,QAAQT,KAAK,GAAG,CAAC,EAAE;UACvBG,IAAI,EAAEA,IAAI;UACVJ,QAAQ,EAAEA,QAAQ;UAClBM,IAAI,EAAEA,IAAI;UACVK,GAAG,EAAER;QACP,CAAC;MACH,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACC,IAAI,CAAC,iBAAiBd,QAAQ,GAAG,EAAEY,KAAK,CAAC;QACjD,OAAO,IAAI;MACb;IACF,CAAC,CACH,CAAC;;IAED;IACA,MAAMG,UAAU,GAAGpB,KAAK,CAACa,MAAM,CAACQ,IAAI,IAAIA,IAAI,KAAK,IAAI,CAAC;IAEtD,OAAO;MACLrB,KAAK,EAAEoB,UAAU;MACjBnB,KAAK,EAAEmB,UAAU,CAACrB,MAAM;MACxBG,OAAO,EAAE,uBAAuBkB,UAAU,CAACrB,MAAM;IACnD,CAAC;EAEH,CAAC,CAAC,OAAOkB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO;MACLjB,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE,CAAC;MACRgB,KAAK,EAAE,sBAAsB;MAC7Bf,OAAO,EAAEe,KAAK,CAACf;IACjB,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}