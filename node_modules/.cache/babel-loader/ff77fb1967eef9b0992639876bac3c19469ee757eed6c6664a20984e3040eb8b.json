{"ast":null,"code":"// Simple icon loader that reads from the public folder\nexport const loadIconsFromFolder = async () => {\n  try {\n    // Since we can't list directory contents directly, we'll try to load icons\n    // by attempting to fetch them with common naming patterns\n    const iconFiles = ['Icon3DRotate.svg', 'IconAIAvatar.svg', 'IconAIBackground.svg', 'IconAIExpand.svg', 'IconAIGen.svg', 'IconAIGenerator.svg', 'IconAIMotionStudio.svg', 'IconAIMusic.svg', 'IconAIReplace.svg', 'IconAIStickerGenerator.svg', 'IconAIUpscale.svg', 'IconAIWrite.svg', 'IconAdd.svg', 'IconAddCircle.svg', 'IconAddPhoto.svg', 'IconAddText.svg', 'IconAdjust.svg', 'IconAdjustBrightness.svg', 'IconAdjustContrast.svg', 'IconAdjustSaturation.svg', 'IconAlignCenter.svg', 'IconAlignLeft.svg', 'IconAlignRight.svg', 'IconAnimation.svg', 'IconArrowDown.svg', 'IconArrowLeft.svg', 'IconArrowRight.svg', 'IconArrowUp.svg', 'IconArtboard.svg', 'IconBackground.svg', 'IconBlur.svg', 'IconBold.svg', 'IconBrush.svg', 'IconCamera.svg', 'IconCanvas.svg', 'IconCheck.svg', 'IconCircle.svg', 'IconClear.svg', 'IconClose.svg', 'IconColor.svg', 'IconCopy.svg', 'IconCrop.svg', 'IconCut.svg', 'IconDelete.svg', 'IconDownload.svg', 'IconEdit.svg', 'IconEllipse.svg', 'IconEraser.svg', 'IconExport.svg', 'IconEye.svg', 'IconEyeOff.svg', 'IconFilter.svg', 'IconFlipHorizontal.svg', 'IconFlipVertical.svg', 'IconFont.svg', 'IconGrid.svg', 'IconGroup.svg', 'IconHand.svg', 'IconHeart.svg', 'IconHelp.svg', 'IconHistory.svg', 'IconHome.svg', 'IconImage.svg', 'IconImport.svg', 'IconInfo.svg', 'IconItalic.svg', 'IconLayer.svg', 'IconLayers.svg', 'IconLine.svg', 'IconLink.svg', 'IconLock.svg', 'IconMagic.svg', 'IconMaximize.svg', 'IconMinimize.svg', 'IconMove.svg', 'IconNew.svg', 'IconOpen.svg', 'IconPaste.svg', 'IconPath.svg', 'IconPause.svg', 'IconPen.svg', 'IconPencil.svg', 'IconPlay.svg', 'IconPolygon.svg', 'IconRectangle.svg', 'IconRedo.svg', 'IconRefresh.svg', 'IconResize.svg', 'IconRotate.svg', 'IconSave.svg', 'IconSearch.svg', 'IconSettings.svg', 'IconShare.svg', 'IconShapes.svg', 'IconStar.svg', 'IconStop.svg', 'IconText.svg', 'IconTransform.svg', 'IconUndo.svg', 'IconUnlock.svg', 'IconUpload.svg', 'IconUser.svg', 'IconVector.svg', 'IconVideo.svg', 'IconZoomIn.svg', 'IconZoomOut.svg'];\n\n    // Try to load each icon file\n    const iconPromises = iconFiles.map(async (filename, index) => {\n      try {\n        const response = await fetch(`/icons/${filename}`);\n        if (!response.ok) {\n          return null; // File doesn't exist\n        }\n        const svgContent = await response.text();\n\n        // Clean filename for display\n        const name = filename.replace('.svg', '').replace(/^Icon/, '').replace(/([A-Z])/g, ' $1').trim();\n        const tags = filename.replace('.svg', '').replace(/^Icon/, '').split(/(?=[A-Z])/).filter(tag => tag.length > 0);\n        return {\n          id: `file-${index + 1}`,\n          name: name,\n          filename: filename,\n          tags: tags,\n          svg: svgContent\n        };\n      } catch (error) {\n        return null; // File doesn't exist or error loading\n      }\n    });\n\n    // Wait for all promises to resolve\n    const results = await Promise.all(iconPromises);\n\n    // Filter out null results (files that don't exist)\n    const validIcons = results.filter(icon => icon !== null);\n    if (validIcons.length === 0) {\n      return {\n        icons: [],\n        count: 0,\n        message: 'No SVG files found in the icons directory.'\n      };\n    }\n    return {\n      icons: validIcons,\n      count: validIcons.length,\n      message: `Successfully loaded ${validIcons.length} icons`\n    };\n  } catch (error) {\n    console.error('Error loading icons:', error);\n    return {\n      icons: [],\n      count: 0,\n      error: 'Failed to load icons',\n      message: error.message\n    };\n  }\n};","map":{"version":3,"names":["loadIconsFromFolder","iconFiles","iconPromises","map","filename","index","response","fetch","ok","svgContent","text","name","replace","trim","tags","split","filter","tag","length","id","svg","error","results","Promise","all","validIcons","icon","icons","count","message","console"],"sources":["/Users/armanarmaghanyan/Documents/Coding/Picsart/pushmaker/src/iconLoader.js"],"sourcesContent":["// Simple icon loader that reads from the public folder\nexport const loadIconsFromFolder = async () => {\n  try {\n    // Since we can't list directory contents directly, we'll try to load icons\n    // by attempting to fetch them with common naming patterns\n    const iconFiles = [\n      'Icon3DRotate.svg', 'IconAIAvatar.svg', 'IconAIBackground.svg', 'IconAIExpand.svg', 'IconAIGen.svg',\n      'IconAIGenerator.svg', 'IconAIMotionStudio.svg', 'IconAIMusic.svg', 'IconAIReplace.svg', 'IconAIStickerGenerator.svg',\n      'IconAIUpscale.svg', 'IconAIWrite.svg', 'IconAdd.svg', 'IconAddCircle.svg', 'IconAddPhoto.svg',\n      'IconAddText.svg', 'IconAdjust.svg', 'IconAdjustBrightness.svg', 'IconAdjustContrast.svg', 'IconAdjustSaturation.svg',\n      'IconAlignCenter.svg', 'IconAlignLeft.svg', 'IconAlignRight.svg', 'IconAnimation.svg', 'IconArrowDown.svg',\n      'IconArrowLeft.svg', 'IconArrowRight.svg', 'IconArrowUp.svg', 'IconArtboard.svg', 'IconBackground.svg',\n      'IconBlur.svg', 'IconBold.svg', 'IconBrush.svg', 'IconCamera.svg', 'IconCanvas.svg',\n      'IconCheck.svg', 'IconCircle.svg', 'IconClear.svg', 'IconClose.svg', 'IconColor.svg',\n      'IconCopy.svg', 'IconCrop.svg', 'IconCut.svg', 'IconDelete.svg', 'IconDownload.svg',\n      'IconEdit.svg', 'IconEllipse.svg', 'IconEraser.svg', 'IconExport.svg', 'IconEye.svg',\n      'IconEyeOff.svg', 'IconFilter.svg', 'IconFlipHorizontal.svg', 'IconFlipVertical.svg', 'IconFont.svg',\n      'IconGrid.svg', 'IconGroup.svg', 'IconHand.svg', 'IconHeart.svg', 'IconHelp.svg',\n      'IconHistory.svg', 'IconHome.svg', 'IconImage.svg', 'IconImport.svg', 'IconInfo.svg',\n      'IconItalic.svg', 'IconLayer.svg', 'IconLayers.svg', 'IconLine.svg', 'IconLink.svg',\n      'IconLock.svg', 'IconMagic.svg', 'IconMaximize.svg', 'IconMinimize.svg', 'IconMove.svg',\n      'IconNew.svg', 'IconOpen.svg', 'IconPaste.svg', 'IconPath.svg', 'IconPause.svg',\n      'IconPen.svg', 'IconPencil.svg', 'IconPlay.svg', 'IconPolygon.svg', 'IconRectangle.svg',\n      'IconRedo.svg', 'IconRefresh.svg', 'IconResize.svg', 'IconRotate.svg', 'IconSave.svg',\n      'IconSearch.svg', 'IconSettings.svg', 'IconShare.svg', 'IconShapes.svg', 'IconStar.svg',\n      'IconStop.svg', 'IconText.svg', 'IconTransform.svg', 'IconUndo.svg', 'IconUnlock.svg',\n      'IconUpload.svg', 'IconUser.svg', 'IconVector.svg', 'IconVideo.svg', 'IconZoomIn.svg',\n      'IconZoomOut.svg'\n    ];\n    \n    // Try to load each icon file\n    const iconPromises = iconFiles.map(async (filename, index) => {\n      try {\n        const response = await fetch(`/icons/${filename}`);\n        if (!response.ok) {\n          return null; // File doesn't exist\n        }\n        \n        const svgContent = await response.text();\n        \n        // Clean filename for display\n        const name = filename.replace('.svg', '').replace(/^Icon/, '').replace(/([A-Z])/g, ' $1').trim();\n        const tags = filename.replace('.svg', '').replace(/^Icon/, '').split(/(?=[A-Z])/).filter(tag => tag.length > 0);\n        \n        return {\n          id: `file-${index + 1}`,\n          name: name,\n          filename: filename,\n          tags: tags,\n          svg: svgContent\n        };\n      } catch (error) {\n        return null; // File doesn't exist or error loading\n      }\n    });\n    \n    // Wait for all promises to resolve\n    const results = await Promise.all(iconPromises);\n    \n    // Filter out null results (files that don't exist)\n    const validIcons = results.filter(icon => icon !== null);\n    \n    if (validIcons.length === 0) {\n      return {\n        icons: [],\n        count: 0,\n        message: 'No SVG files found in the icons directory.'\n      };\n    }\n    \n    return {\n      icons: validIcons,\n      count: validIcons.length,\n      message: `Successfully loaded ${validIcons.length} icons`\n    };\n    \n  } catch (error) {\n    console.error('Error loading icons:', error);\n    return {\n      icons: [],\n      count: 0,\n      error: 'Failed to load icons',\n      message: error.message\n    };\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}